# dagster/overlays/dev/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dagster-custom
  labels:
    app: dagster
spec:
  replicas: 1
  selector:
    matchLabels:
      app: dagster
  template:
    metadata:
      labels:
        app: dagster
    spec:
      serviceAccountName: dagster
      containers:
      - name: dagster-dagit
        image: dagster/dagster-k8s:1.5.5
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 3000
          name: dagit-http
        env:
        - name: DAGSTER_HOME
          value: "/opt/dagster/dagster_home"
        - name: DAGSTER_PG_USERNAME
          valueFrom:
            secretKeyRef:
              name: dagster-pgsql-config
              key: PGSQL_USER
        - name: DAGSTER_PG_PASSWORD
          valueFrom:
            secretKeyRef:
              name: dagster-pgsql-config
              key: PGSQL_PASSWORD
        - name: DAGSTER_PG_HOST
          valueFrom:
            secretKeyRef:
              name: dagster-pgsql-config
              key: PGSQL_HOST
        - name: DAGSTER_PG_PORT
          valueFrom:
            secretKeyRef:
              name: dagster-pgsql-config
              key: PGSQL_PORT
        - name: DAGSTER_PG_DB
          valueFrom:
            secretKeyRef:
              name: dagster-pgsql-config
              key: PGSQL_DATABASE
        - name: DAGIT_PORT
          value: "3000"
        - name: DAGSTER_K8S_PIPELINE_RUN_NAMESPACE
          value: "media-dev"
        - name: DAGSTER_K8S_PIPELINE_RUN_ENV_CONFIGMAP
          value: "dagster-pipeline-env"
        command:
        - bash
        - -c
        - |
          # Install git for repository cloning
          apt-get update && apt-get install -y git
          
          mkdir -p $DAGSTER_HOME
          cat > $DAGSTER_HOME/dagster.yaml << EOL
          run_storage:
            module: dagster_postgres.run_storage
            class: PostgresRunStorage
            config:
              postgres_db:
                username: ${DAGSTER_PG_USERNAME}
                password: ${DAGSTER_PG_PASSWORD}
                hostname: ${DAGSTER_PG_HOST}
                port: ${DAGSTER_PG_PORT}
                db_name: ${DAGSTER_PG_DB}
                
          schedule_storage:
            module: dagster_postgres.schedule_storage
            class: PostgresScheduleStorage
            config:
              postgres_db:
                username: ${DAGSTER_PG_USERNAME}
                password: ${DAGSTER_PG_PASSWORD}
                hostname: ${DAGSTER_PG_HOST}
                port: ${DAGSTER_PG_PORT}
                db_name: ${DAGSTER_PG_DB}
                
          event_log_storage:
            module: dagster_postgres.event_log
            class: PostgresEventLogStorage
            config:
              postgres_db:
                username: ${DAGSTER_PG_USERNAME}
                password: ${DAGSTER_PG_PASSWORD}
                hostname: ${DAGSTER_PG_HOST}
                port: ${DAGSTER_PG_PORT}
                db_name: ${DAGSTER_PG_DB}
                
          run_coordinator:
            module: dagster.core.run_coordinator
            class: DefaultRunCoordinator
              
          run_launcher:
            module: dagster.core.launcher
            class: DefaultRunLauncher
          EOL
          
          # Clone repository to both locations for compatibility
          git clone -b dev https://github.com/x81k25/dagstributor.git /opt/dagster/dagster_workspace/dagstributor
          ln -sf /opt/dagster/dagster_workspace/dagstributor $DAGSTER_HOME/dagstributor
          
          cat > $DAGSTER_HOME/workspace.yaml << EOL
          load_from:
            - python_file:
                relative_path: "dagstributor/repositories/main.py"
                working_directory: "$DAGSTER_HOME"
          EOL
          
          dagster-webserver -h 0.0.0.0 -p 3000 -w $DAGSTER_HOME/workspace.yaml
        volumeMounts:
        - name: dagster-home
          mountPath: /opt/dagster/dagster_home
        - name: dagster-workspace
          mountPath: /opt/dagster/dagster_workspace
      - name: dagster-daemon
        image: dagster/dagster-k8s:1.5.5
        imagePullPolicy: IfNotPresent
        env:
        - name: DAGSTER_HOME
          value: "/opt/dagster/dagster_home"
        - name: DAGSTER_PG_USERNAME
          valueFrom:
            secretKeyRef:
              name: dagster-pgsql-config
              key: PGSQL_USER
        - name: DAGSTER_PG_PASSWORD
          valueFrom:
            secretKeyRef:
              name: dagster-pgsql-config
              key: PGSQL_PASSWORD
        - name: DAGSTER_PG_HOST
          valueFrom:
            secretKeyRef:
              name: dagster-pgsql-config
              key: PGSQL_HOST
        - name: DAGSTER_PG_PORT
          valueFrom:
            secretKeyRef:
              name: dagster-pgsql-config
              key: PGSQL_PORT
        - name: DAGSTER_PG_DB
          valueFrom:
            secretKeyRef:
              name: dagster-pgsql-config
              key: PGSQL_DATABASE
        - name: DAGSTER_K8S_PIPELINE_RUN_NAMESPACE
          value: "media-dev"
        - name: DAGSTER_K8S_PIPELINE_RUN_ENV_CONFIGMAP
          value: "dagster-pipeline-env"
        command:
        - bash
        - -c
        - |
          # Wait until the shared config file is created by dagit
          until [ -f $DAGSTER_HOME/dagster.yaml ]; do
            echo "Waiting for dagster.yaml to be created..."
            sleep 5
          done
          dagster-daemon run -w $DAGSTER_HOME/workspace.yaml
        volumeMounts:
        - name: dagster-home
          mountPath: /opt/dagster/dagster_home
        - name: dagster-workspace
          mountPath: /opt/dagster/dagster_workspace
      volumes:
      - name: dagster-home
        hostPath:
          path: /d/k8s/volumes/dagster/dev/home
          type: DirectoryOrCreate
      - name: dagster-workspace
        hostPath:
          path: /d/k8s/volumes/dagster/dev/workspace
          type: DirectoryOrCreate